name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TF_STATE_BUCKET: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=quizapp/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve tfplan

  cluster-status:
    name: "Cluster Status"
    needs: terraform
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'apply'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Connect to EKS cluster
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name quizapp-eks

    - name: Show infrastructure status
      run: |
        echo "üèóÔ∏è INFRASTRUCTURE DEPLOYED SUCCESSFULLY"
        echo "========================================"
        echo ""
        echo "üì¶ ECR Repositories:"
        aws ecr describe-repositories --query 'repositories[*].repositoryName' --output table
        echo ""
        echo "üåê EKS Cluster:"
        kubectl get nodes
        echo ""
        echo "üìÇ Namespaces:"
        kubectl get namespaces
        echo ""
        echo "üéõÔ∏è Load Balancer Controller:"
        kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller
        echo ""
        echo "‚öñÔ∏è Load Balancers (You need to wait for the LoadBalancer IPs to be ready):"
        kubectl get svc --all-namespaces --field-selector spec.type=LoadBalancer
        echo ""
        echo "üîë Access Commands:"
        echo "aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name quizapp-eks"
        echo ""
        echo "üìä To access ArgoCD (default username: admin):"
        echo "kubectl get svc argocd-server -n argocd"
        echo "To get the initial admin password, run:"
        echo "export ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)"
        echo "echo $ARGOCD_PASSWORD"
        echo ""
        echo "üìà To access Grafana (default: admin/admin123):"
        echo "kubectl get svc prometheus-grafana -n monitoring"
        echo ""
        echo "üöÄ Next Steps:"
        echo "Run the CI workflow and add helm chart to ArgoCD"